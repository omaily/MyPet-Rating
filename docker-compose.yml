version: "3.9"
services:
  # web:
  #   container_name: rating-web
  #   image: rating-web
  #   build:
  #     # context: .
  #     dockerfile: Dockerfile
  #     target: web
  #   environment: 
  #     WEB_PORT: ":3000"
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./web/src:/app/src
  #   stdin_open: true
  #   tty: true
  app:
    container_name: rating-app
    image: rating-app
    build: 
      context: . #путь до докерфайла
      dockerfile: Dockerfile #Сам файл
      target: dev #этап FROM в Dockerfile 
    restart: always
    environment:
      API_SERVER_ADDR: ":4000"
    ports:
      - 4000:4000
    volumes:
      - .:/app
    links: #связывает контейнер app контейнером db
      - db
    depends_on: #ожидаем запуска образа базы
      - db
  db:
    # image: postgres:14-bullseye #последняя 14.9
    container_name: rating-db
    image: postgres:latest
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "critic"
      POSTGRES_PASSWORD: "1234"
      POSTGRES_DB: "rating"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate: &basemigrate
    profiles: ["tools"]
    image: migrate/migrate
    entrypoint: "migrate -database 'postgresql://critic:1234@db/rating?sslmode=disable' -path /tmp/migrations"
    command: up
    links:
    - db
    volumes:
    - ./migrations:/tmp/migrations

  create-migration:
    <<: *basemigrate
    entrypoint: "migrate create -dir /tmp/migrations -ext sql"
    command: ""

volumes:
  postgres_data: