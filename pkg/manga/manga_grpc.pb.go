// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/proto/manga.proto

package manga

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RaizeService_CreateTitle_FullMethodName = "/mangaProto.raizeService/CreateTitle"
	RaizeService_GetTitles_FullMethodName   = "/mangaProto.raizeService/GetTitles"
)

// RaizeServiceClient is the client API for RaizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaizeServiceClient interface {
	CreateTitle(ctx context.Context, in *Consignment, opts ...grpc.CallOption) (*GetResponse, error)
	GetTitles(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type raizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaizeServiceClient(cc grpc.ClientConnInterface) RaizeServiceClient {
	return &raizeServiceClient{cc}
}

func (c *raizeServiceClient) CreateTitle(ctx context.Context, in *Consignment, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RaizeService_CreateTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raizeServiceClient) GetTitles(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RaizeService_GetTitles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaizeServiceServer is the server API for RaizeService service.
// All implementations must embed UnimplementedRaizeServiceServer
// for forward compatibility
type RaizeServiceServer interface {
	CreateTitle(context.Context, *Consignment) (*GetResponse, error)
	GetTitles(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedRaizeServiceServer()
}

// UnimplementedRaizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRaizeServiceServer struct {
}

func (UnimplementedRaizeServiceServer) CreateTitle(context.Context, *Consignment) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTitle not implemented")
}
func (UnimplementedRaizeServiceServer) GetTitles(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitles not implemented")
}
func (UnimplementedRaizeServiceServer) mustEmbedUnimplementedRaizeServiceServer() {}

// UnsafeRaizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaizeServiceServer will
// result in compilation errors.
type UnsafeRaizeServiceServer interface {
	mustEmbedUnimplementedRaizeServiceServer()
}

func RegisterRaizeServiceServer(s grpc.ServiceRegistrar, srv RaizeServiceServer) {
	s.RegisterService(&RaizeService_ServiceDesc, srv)
}

func _RaizeService_CreateTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaizeServiceServer).CreateTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaizeService_CreateTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaizeServiceServer).CreateTitle(ctx, req.(*Consignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaizeService_GetTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaizeServiceServer).GetTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaizeService_GetTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaizeServiceServer).GetTitles(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaizeService_ServiceDesc is the grpc.ServiceDesc for RaizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mangaProto.raizeService",
	HandlerType: (*RaizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTitle",
			Handler:    _RaizeService_CreateTitle_Handler,
		},
		{
			MethodName: "GetTitles",
			Handler:    _RaizeService_GetTitles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/manga.proto",
}
